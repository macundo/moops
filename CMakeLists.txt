cmake_minimum_required(VERSION 2.8)

project(MOOPS)

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
SET(APP_LIBS "" CACHE INTERNAL "")

#FindParaView
OPTION(USE_PV_COPROCESSOR "Use Paraview Coprocessor" OFF)
IF(USE_PV_COPROCESSOR)
    FIND_PACKAGE(ParaView)
    INCLUDE(${PARAVIEW_USE_FILE})
    INCLUDE_DIRECTORIES(${VTK_MPI_INCLUDE_DIR})
    IF(NOT VTK_MPI_INCLUDE_DIR)
        MESSAGE(SEND_ERROR "Must build ParaView with MPI.")
    ENDIF()
    SET(APP_LIBS ${APP_LIBS} vtkIO QVTK vtkRendering vtkGraphics vtkCommon vtkCoProcessor vtkDICOMParser vtkNetCDF vtkmetaio vtksqlite vtkpng vtkjpeg vtktiff vtkexpat vtkftgl vtkverdict vtklibxml2 vtkalglib vtkexoIIc VPIC Cosmo)
    MESSAGE(STATUS "Enabling Paraview Coprocessor and VTK")
    ADD_DEFINITIONS(-DUSE_PV_COPROCESSOR)
ENDIF(USE_PV_COPROCESSOR)

#FindVTK
IF(NOT USE_PV_COPROCESSOR)
FIND_PACKAGE(VTK)
IF(VTK_FOUND)
  INCLUDE(${VTK_USE_FILE})
  SET(APP_LIBS ${APP_LIBS} vtkIO QVTK vtkRendering vtkGraphics vtkCommon)
    MESSAGE(STATUS "Enabling VTK")
ENDIF(VTK_FOUND)
ENDIF(NOT USE_PV_COPROCESSOR)

# FindQt4
OPTION(USE_QT_GUI "Build with QT4 GUI." OFF)
IF(USE_QT_GUI)
    FIND_PACKAGE(Qt4 REQUIRED)
    SET(QT_USE_QTOPENGL TRUE)
    INCLUDE(${QT_USE_FILE})
    ADD_DEFINITIONS(${QT_DEFINITIONS} -DUSE_QT_GUI)
    SET(APP_LIBS ${APP_LIBS} gui)
    ADD_SUBDIRECTORY(gui)
    MESSAGE(STATUS "Enabling QT4 GUI")
ENDIF(USE_QT_GUI)

#FindMPI
option(USE_MPI "Use MPI" ON)
IF(USE_MPI)
    find_package(MPI REQUIRED)
    MESSAGE(STATUS "Enabling MPI")
    include_directories(${MPI_CXX_INCLUDE_PATH})
ENDIF(USE_MPI)

#FindCUDA
OPTION(USE_CUDA "Use the cuda-based Stokes solver." OFF)
IF(USE_CUDA)
  FIND_PACKAGE(CUDA REQUIRED)
  SET(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -gencode arch=compute_20,code=sm_20 -Xcompiler -fopenmp --ptxas-options=-v -O3 -use_fast_math)
  ADD_SUBDIRECTORY(math/fluid_solver/stokes/nbody_gpu)
  ADD_SUBDIRECTORY(math/fluid_solver/stokes/fmm/hybrid)
  ADD_DEFINITIONS(-DUSE_CUDA)
  SET(APP_LIBS ${APP_LIBS} cudaStokesSolver hybridfmm)
  MESSAGE(STATUS "Enabling CUDA")
ENDIF(USE_CUDA)
ADD_SUBDIRECTORY(math/fluid_solver/stokes/fmm/exafmm)

INCLUDE(CheckCXXCompilerFlag)
INCLUDE(CheckCCompilerFlag)
IF(CMAKE_COMPILER_IS_GNUCXX)
    OPTION(ENABLE_WARNINGS "Enable/Disable Warnings in g++" OFF)
    IF(ENABLE_WARNINGS)
      SET(G++_WARNINGS "-Weffc++ -Wnon-virtual-dtor -Wno-long-long -ansi -Wundef -Wcast-align -Wchar-subscripts -Wall -W -Wpointer-arith -Wwrite-strings -Wformat-security -Wold-style-cast")
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${G++_WARNINGS}")
    ENDIF()
    OPTION(ENABLE_FLAGS "Enable/Disable Fags in g++" OFF)
    IF(ENABLE_FLAGS)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fexceptions -fno-check-new -fno-common -fstrict-aliasing")
        check_cxx_compiler_flag("-Wno-variadic-macros" COMPILER_SUPPORT_WNOVARIADICMACRO)
        IF(COMPILER_SUPPORT_WNOVARIADICMACRO)
            SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-variadic-macros")
        ENDIF()

        check_cxx_compiler_flag("-Wextra" COMPILER_SUPPORT_WEXTRA)
        IF(COMPILER_SUPPORT_WEXTRA)
            SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wextra")
        ENDIF()

        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pedantic")
    ENDIF()
    check_cxx_compiler_flag("-fopenmp" CXXCOMPILER_SUPPORT_OPENMP)
    check_cxx_compiler_flag("-fopenmp" CCOMPILER_SUPPORT_OPENMP)
    IF(CXXCOMPILER_SUPPORT_OPENMP AND CCOMPILER_SUPPORT_OPENMP)
        OPTION(ENABLE_OPENMP_GLOBALY "Enable/Disable OpenMP" ON)
        IF(ENABLE_OPENMP_GLOBALY)
            SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
            SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fopenmp")
            MESSAGE(STATUS "Enabling OpenMP")
        ENDIF()
    ENDIF()
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

INCLUDE(CTest)
IF(BUILD_TESTING)
    ADD_SUBDIRECTORY(testing)
ENDIF(BUILD_TESTING)

OPTION(ENABLE_EXAMPLES "Enable examples" ON)
IF(ENABLE_EXAMPLES)
  ADD_SUBDIRECTORY(examples)
  MESSAGE(STATUS "Enabling Examples")
ENDIF(ENABLE_EXAMPLES)
