
macro(SET_BSUB_CMD EXE JOB_NAME QUEUE)
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \nbsub <<EOF")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n####   Run program    ####")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -q ${QUEUE}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -J ${JOB_NAME}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -n 2")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -T 12")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -x")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -o out.%J")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -e err.%J")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \nmpirun ${EXE}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n####   End run program    ####")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \nEOF")
endmacro(SET_BSUB_CMD)

macro(SET_GIT_CMD REMOTE_SCRATCH_DIRECTORY)
    set(GIT_COMMANDS "${GIT_COMMANDS} cd ${REMOTE_SCRATCH_DIRECTORY}")
    IF(CLONE_PROJECT_KILLDEVIL)
        message(STATUS "Going to clone")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nif [ -d moops ]; then")
        set(GIT_COMMANDS "${GIT_COMMANDS} \n  rm -Rf ${REMOTE_SCRATCH_DIRECTORY}/moops")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nfi")
        set(GIT_COMMANDS "${GIT_COMMANDS} \ngit clone git@bitbucket.org:ricortiz/moops.git ${REMOTE_SCRATCH_DIRECTORY}/moops")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nmkdir ${REMOTE_SCRATCH_DIRECTORY}/moops/bin")
    else(CLONE_PROJECT_KILLDEVIL)
        message(STATUS "Going to pull")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nif [ ! -d moops ]; then")
        set(GIT_COMMANDS "${GIT_COMMANDS} \n  mkdir ${REMOTE_SCRATCH_DIRECTORY}/moops/bin")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nfi")
        set(GIT_COMMANDS "${GIT_COMMANDS} \ncd ${REMOTE_SCRATCH_DIRECTORY}/moops/bin")
        set(GIT_COMMANDS "${GIT_COMMANDS} \ngit pull")
    ENDIF(CLONE_PROJECT_KILLDEVIL)
endmacro(SET_GIT_CMD)

# Sets the variable GIT_COMMANDS
macro(SET_GIT_CMD2 CLONE_PROJECT)
    IF(CLONE_PROJECT)
        set(GIT_COMMANDS "IF [ -d moops ]; then")
        set(GIT_COMMANDS "${GIT_COMMANDS} \n  rm -Rf ${REMOTE_SCRATCH_DIRECTORY}/moops")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nfi")
        set(GIT_COMMANDS "${GIT_COMMANDS} \ngit clone git@bitbucket.org:ricortiz/moops.git ${REMOTE_SCRATCH_DIRECTORY}/moops")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nmkdir ${REMOTE_SCRATCH_DIRECTORY}/moops/bin")
        set(GIT_COMMANDS "${GIT_COMMANDS} \ncd ${REMOTE_SCRATCH_DIRECTORY}/moops/bin")
    else(CLONE_PROJECT)
        set(GIT_COMMANDS "IF [! -d moops ]; then")
        set(GIT_COMMANDS "${GIT_COMMANDS} \n  mkdir ${REMOTE_SCRATCH_DIRECTORY}/moops/bin")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nfi")
        set(GIT_COMMANDS "${GIT_COMMANDS} \ncd ${REMOTE_SCRATCH_DIRECTORY}/moops/bin")
        set(GIT_COMMANDS "${GIT_COMMANDS} \ngit pull")
    ENDIF()
endmacro(SET_GIT_CMD2)

# sets the variable BSUB_COMMANDS
macro(SET_BSUB_CMD2 EXE JOB_NAME QUEUE)
    set(BSUB_COMMANDS "bsub <<EOF")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n####   Run program    ####")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -q ${QUEUE}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -J ${JOB_NAME}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -n 2")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -T 12")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -x")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -o out.%J")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -e err.%J")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \nmpirun ${EXE}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n####   End run program    ####")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \nEOF")
endmacro(SET_BSUB_CMD2)

macro(SUBMIT_JOB JOB_NAME PROGRAM_PATH PROGRAM_NAME CMAKE_CACHE QUEUE CLONE_PROJECT ENV_COMMANDS)
    set_git_cmd2(${CLONE_PROJECT})

    set(BUILD_COMMANDS "${BUILD_COMMANDS} \ncd ${MOOPS_REMOTE_DIRECTORY}/bin")
    set(BUILD_COMMANDS "${BUILD_COMMANDS} \ncmake ${CMAKE_CACHE}")
    set(BUILD_COMMANDS "${BUILD_COMMANDS} \nmake ${PROGRAM_NAME}\n")

    set_bsub_cmd2(${PROGRAM_PATH}/${PROGRAM_NAME} ${JOB_NAME} ${QUEUE})

    FILE(WRITE ${PROJECT_BINARY_DIR}/Submit${PROGRAM_NAME}Job.sh "#!/bin/bash\n\n")
    FILE(APPEND ${PROJECT_BINARY_DIR}/Submit${PROGRAM_NAME}Job.sh "${ENV_COMMANDS}\n")
    FILE(APPEND ${PROJECT_BINARY_DIR}/Submit${PROGRAM_NAME}Job.sh "${GIT_COMMANDS}\n")
    FILE(APPEND ${PROJECT_BINARY_DIR}/Submit${PROGRAM_NAME}Job.sh "${BUILD_COMMANDS}\n")
    FILE(APPEND ${PROJECT_BINARY_DIR}/Submit${PROGRAM_NAME}Job.sh "${BSUB_COMMANDS}\n")

    IF(KILL_JOB_FIRST)
        execute_process(COMMAND ${SSH_COMMAND} ${REMOTE_SERVER} bkill `bjobs -u ricortiz | grep ${JOB_NAME} | cut -f1 -d\" \"`)
    ENDIF()
    find_program(SSH_COMMAND NAMES ssh)
    find_program(SCP_COMMAND NAMES scp)
    add_custom_target(Submit${PROGRAM_NAME}Job ALL COMMAND ${SCP_COMMAND} ${PROJECT_BINARY_DIR}/Submit${PROGRAM_NAME}Job.sh ${REMOTE_SERVER}:${REMOTE_SCRATCH_DIRECTORY}
        COMMAND ${SCP_COMMAND} ${PROJECT_BINARY_DIR}/Submit${PROGRAM_NAME}Job.sh ${REMOTE_SERVER}:${REMOTE_SCRATCH_DIRECTORY}
        COMMAND ${SSH_COMMAND} ${REMOTE_SERVER} sh ${REMOTE_SCRATCH_DIRECTORY}/Submit${PROGRAM_NAME}Job.sh
        COMMAND ${SSH_COMMAND} ${REMOTE_SERVER} bjobs -J ${JOB_NAME}
        )

endmacro()
