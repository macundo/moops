
find_program(SSH_COMMAND NAMES ssh)
find_program(SSH_COMMAND NAMES scp)
# Sets the variable GIT_COMMANDS
macro(CLONE_REPOSITORY)
    set(CMD "bash <<EOF")
    set(CMD "${CMD} \nif [ -d ${MOOPS_SOURCE_DIR} ]\; then")
    set(CMD "${CMD} \n  rm -Rf ${MOOPS_SOURCE_DIR}")
    set(CMD "${CMD} \nfi")
    set(CMD "${CMD} \ngit clone git@bitbucket.org:ricortiz/moops.git ${MOOPS_SOURCE_DIR}")
    set(CMD "${CMD} \nEOF")
    execute_process(COMMAND ${SSH_COMMAND} ${REMOTE_SERVER} ${CMD} RESULT_VARIABLE out)
endmacro(CLONE_REPOSITORY)

macro(PULL_REPOSITORY)
    set(CMD "bash <<EOF")
    set(CMD "${CMD} \nif [ -d ${MOOPS_SOURCE_DIR} ]\; then")
    set(CMD "${CMD} \n  cd ${MOOPS_SOURCE_DIR}")
    set(CMD "${CMD} \n  git pull")
    set(CMD "${CMD} \nfi")
    set(CMD "${CMD} \nEOF")
    execute_process(COMMAND ${SSH_COMMAND} ${REMOTE_SERVER} ${CMD} RESULT_VARIABLE out)
endmacro(PULL_REPOSITORY)

macro(SET_BUILD_COMMANDS ${CMAKE_CACHE})
    set(CMD "bash <<EOF")
    set(CMD "${CMD} \nif [ ! -d ${MOOPS_BINARY_DIR} ]\; then")
    set(CMD "${CMD} \n    mkdir ${MOOPS_BINARY_DIR}")
    set(CMD "${CMD} \nfi")
    set(CMD "${CMD} \ncd ${MOOPS_BINARY_DIR}")
    set(CMD "${CMD} \ncmake ${CMAKE_CACHE} ${MOOPS_SOURCE_DIR}")
    set(CMD "${CMD} \nmake ${PROGRAM_NAME}")
    set(CMD "${CMD} \nEOF")
    execute_process(COMMAND ${SSH_COMMAND} ${REMOTE_SERVER} ${CMD} RESULT_VARIABLE out)
endmacro(SET_BUILD_COMMANDS)

macro(SET_BSUB_COMMANDS EXE JOB_NAME QUEUE)
    set(BSUB_COMMANDS "\nbsub <<EOF")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n####   Run program    ####")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -q ${QUEUE}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -J ${JOB_NAME}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -n ${NUM_PROCESSORS}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -T 12")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -x")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -o out.%J")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -e err.%J")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \nmpirun ${EXE}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n####   End run program    ####")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \nEOF")
endmacro(SET_BSUB_COMMANDS)

macro(ADD_DATA_PATH DATA_PATH)
    set(CMD "bash <<EOF")
    set(CMD "${CMD} \nif [ ! -d ${DATA_PATH} ]\; then")
    set(CMD "${CMD} \n    mkdir ${DATA_PATH}")
    set(CMD "${CMD} \nfi")
    set(CMD "${CMD} \nEOF")
    execute_process(COMMAND ${SSH_COMMAND} ${REMOTE_SERVER} ${CMD} RESULT_VARIABLE out OUTPUT_QUIET)
endmacro()

macro(SUBMIT_JOB TARGET_NAME)
    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/Submit${PROGRAM_NAME}Job.sh "#!/bin/bash \n\n${BSUB_COMMANDS}")
    execute_process(COMMAND ${SCP_COMMAND} ${CMAKE_CURRENT_BINARY_DIR}/Submit${PROGRAM_NAME}Job.sh ${REMOTE_SERVER}:${SCRATCH_REMOTE_DIRECTORY}/ RESULT_VARIABLE out OUTPUT_QUIET)
    add_custom_target(${TARGET_NAME} COMMAND ${SSH_COMMAND} ${REMOTE_SERVER} sh ${SCRATCH_REMOTE_DIRECTORY}/Submit${PROGRAM_NAME}Job.sh)
    execute_process(COMMAND ${SSH_COMMAND} ${REMOTE_SERVER} bjobs -u ricortiz | grep ${JOB_NAME} | cut -f1 -d\" \" OUTPUT_VARIABLE out)
    add_custom_target(Terminate${TARGET_NAME} COMMAND ${SSH_COMMAND} ${REMOTE_SERVER} bkill ${out})
endmacro()
