
find_program(SSH_COMMAND NAMES ssh)
find_program(SCP_COMMAND NAMES scp)

macro(SET_BSUB_CMD EXE JOB_NAME QUEUE)
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \nbsub <<EOF")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n####   Run program    ####")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -q ${QUEUE}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -J ${JOB_NAME}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -n 2")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -T 12")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -x")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -o out.%J")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n#BSUB -e err.%J")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \nmpirun ${EXE}")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \n####   End run program    ####")
    set(BSUB_COMMANDS "${BSUB_COMMANDS} \nEOF")
endmacro(SET_BSUB_CMD)

macro(SET_GIT_CMD SCRATCH_REMOTE_DIRECTORY)
    set(GIT_COMMANDS "${GIT_COMMANDS} cd ${SCRATCH_REMOTE_DIRECTORY}")
    if(CLONE_PROJECT_KILLDEVIL)
        message(STATUS "Going to clone")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nif [ -d moops ]; then")
        set(GIT_COMMANDS "${GIT_COMMANDS} \n  rm -Rf ${SCRATCH_REMOTE_DIRECTORY}/moops")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nfi")
        set(GIT_COMMANDS "${GIT_COMMANDS} \ngit clone git@bitbucket.org:ricortiz/moops.git ${SCRATCH_REMOTE_DIRECTORY}/moops")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nmkdir ${SCRATCH_REMOTE_DIRECTORY}/moops/bin")
    elseif(PULL_PROJECT_KILLDEVIL)
        message(STATUS "Going to pull")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nif [! -d moops ]; then")
        set(GIT_COMMANDS "${GIT_COMMANDS} \n  mkdir ${SCRATCH_REMOTE_DIRECTORY}/moops/bin")
        set(GIT_COMMANDS "${GIT_COMMANDS} \nfi")
        set(GIT_COMMANDS "${GIT_COMMANDS} \ncd ${SSCRATCH_REMOTE_DIRECTORY}/moops/bin")
        set(GIT_COMMANDS "${GIT_COMMANDS} \ngit pull")
    endif()
endmacro(SET_GIT_CMD)


