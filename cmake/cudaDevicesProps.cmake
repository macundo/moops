
macro(GET_CUDA_DEVICE_PROP PROP CRITERIA OUT)

    file(WRITE ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "#include <cuda_runtime_api.h>\n")
    file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "#include <iostream>\n\n")
    file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "int main(int ac, char** av)\n{\n")
    file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "    int deviceCount = 0;\n")
    file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "    cudaGetDeviceCount(&deviceCount);\n")
    file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "    if (deviceCount == 0) { std::cout << \"There is no device supporting CUDA\" << std::endl;\n std::cout << 0.0 << std::endl;\n}")
    file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "    for (int dev = 0; dev < deviceCount; ++dev) \n    {\n")
    if(${PROP} MATCHES "MAJOR_MINOR")
        file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "        cudaDeviceProp deviceProp;\n")
        file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "        cudaGetDeviceProperties(&deviceProp, dev);\n")
        file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "        std::cout << deviceProp.major << \".\"<< deviceProp.minor << std::endl;\n")
    endif()
    if(${PROP} MATCHES "VERSION")
        file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "        int driverVersion;\n")
        file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "        cudaDriverGetVersion(&driverVersion);\n")
        file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "        std::cout << driverVersion/1000 << \".\"<< driverVersion%100 << std::endl;\n")
    endif()
    file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "    }\n")
    file(APPEND ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp "}\n")

    execute_process(COMMAND ${CMAKE_CXX_COMPILER} ${PROJECT_BINARY_DIR}/cudaComputeCapability.cpp -o ${PROJECT_BINARY_DIR}/cudaComputeCapability -I${CUDA_INCLUDE_DIRS} -L/usr/local/cuda/lib64 -lcudart RESULT_VARIABLE out OUTPUT_QUIET)
    set(CMD "${PROJECT_BINARY_DIR}/cudaComputeCapability")
    execute_process(COMMAND ${CMD} OUTPUT_VARIABLE out)

    set(${OUT} 0)
    if(${out} VERSION_GREATER ${CRITERIA} OR ${out} VERSION_EQUAL ${CRITERIA})
        set(${OUT} 1)
    endif()
endmacro()
